<!-- c2s configuration -->
<c2s>
  <pidfile>/run/jabberd2/${id}.pid</pidfile>

  <router>
    <ip>127.0.0.1</ip>
    <port>5347</port>

    <user>{{ jabberd2_router_user_name }}</user>
    <pass>{{ jabberd2_router_user_secret }}</pass>

    <retry>
      <init>-1</init>
      <lost>-1</lost>
      <sleep>1</sleep>
    </retry>
  </router>

  <log type='file'>
    <file>/var/log/jabberd2/c2s.log</file>
  </log>

  <!-- Local network configuration -->
  <local>
    <id realm='{{ jabberd2_domain }}'
        {{ if jabberd2_cert_pemfile is defined and jabberd2_cert_cachain is defined }}
        pemfile='{{ jabberd2_cert_pemfile }}'
        verify-mode='7'
        ciphers='EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'
        cachain='{{ jabberd2_cert_cachain }}'
        require-starttls='mu'
        {{ endif }}
        register-enable='mu'
        register-oob='https://{{ jabberd2_domain }}/register'
    >{{ jabberd2_domain }}</id>

    <!-- IP address to bind to (default: 0.0.0.0) -->
    <ip>0.0.0.0</ip>

    <!-- Port to bind to, or 0 to disable unencrypted access to the
         server (default: 5222) -->
    <port>5222</port>

    <!-- Forward incoming HTTP clients to a real HTTP server -->
    <httpforward>https://{{ jabberd2_domain }}/</httpforward>
  </local>

  <!-- Input/output settings -->
  <io>
    <!-- Maximum number of file descriptors. This value sets an upper
         limit on the number of users who may be logged in to this
         server at a given time. Each user consumers one file
         descriptor.

         Note that the number of possible connections will be slightly
         less than this, because c2s itself can use up five on its own,
         and auth/reg modules may need a few also. If the supply of
         file descriptors is exhausted, new incoming connections will
         be denied.

         Also note that this value only affects how many file descriptors
         jabberd is able to handle internally. You may also need to
         tell your operating system to allow jabberd to use more file
         descriptors. On Linux this can be done using ulimit -n or by
         changing the value of /proc/sys/fd/file-max.

         (default: 1024) -->
    <max_fds>1024</max_fds>

    <!-- Rate limiting -->
    <limits>
      <!-- Maximum bytes per second - if more than X bytes are sent in Y
           seconds, connection is throttled for Z seconds. The format
           is:

             <bytes seconds='Y' throttle='Z'>X</bytes>

           Default Y is 1, default Z is 5. set X to 0 to disable. -->
      <bytes>0</bytes>

      <!-- Maximum number of stanzas per second - if more than X stanzas
           are sent in Y seconds, connection is throttled for Z seconds.
           The format is:

             <stanzas seconds='Y' throttle='Z'>X</stanzas>

           Default Y 1, default Z is 5. Set X to 0 to disable -->
      <stanzas>1000</stanzas>

      <!-- Maximum connects per second - if more than X connects are
           attempted from a single IP in Y seconds, that IP is throttled
           for Z seconds. The format is:

             <connects seconds='Y' throttle='Z'>X</connects>

           Default Y is 5, default Z is 5. set X to 0 to disable. -->
      <connects>0</connects>

      <!-- Maximum stanza size - if more than given number of bytes
           are read in one incoming stanza, the stream is closed
           with policy-violation error.

           Set to 0 to disable.
           Values less than 16384 might not work. -->
      <stanzasize>65535</stanzasize>
    </limits>

    <!-- Enable XEP-0138: Stream Compression -->
    <compression/>

    <!-- Enable WebSocket protocol support -->
    <!--
    <websocket/>
    -->

    <!-- IP-based access controls. If a connection IP matches an allow
         rule, the connection will be accepted. If a connecting IP
         matches a deny rule, the connection will be refused. If the
         connecting IP does not match any rules, or it matches both an
         allow and a deny rule, the contents of the <order/> option
         determines what happens. -->
    <access>
      <!-- Rule check order (default: allow,deny)

           allow,deny - Check allow rules, then check deny rules.
                        Allow by default.
           deny,allow - Check deny rules, then check allow rules.
                        Deny by default. -->
      <order>allow,deny</order>

      <!-- Allow a network. If the mask isn't specified, it defaults to
           255.255.255.255 (ie allow onle the specified IP) -->
      <!--
      <allow ip='127.0.0.0' mask='255.0.0.0'/>
      -->

      <!-- Allow a single host -->
      <!--
      <allow ip='12.34.56.78'/>
      -->

      <!-- Deny a network or a host -->
      <!--
      <deny ip='127.0.0.1' mask='255.0.0.0'/>
      <deny ip='87.65.43.21'/>
      -->
    </access>

    <!-- Timed checks -->
    <check>
      <!-- Interval between checks.

           Open client connections will be checked every n seconds, and
           the following checks applied.

           0 disables all checks.                       (default: 0) -->
      <interval>0</interval>

      <!-- Idle connection checks.

           Connections that have not sent data for longer than this many
           seconds will be dropped.

           0 disables idle timeouts.                    (default: 0) -->
      <idle>0</idle>

      <!-- Keepalives.

           Connections that have not sent data for longer than this many
           seconds will have a single whitespace character sent to them.
           This will force the TCP connection to be closed if they have
           disconnected without us knowing about it.

           0 disables keepalives.                       (default: 0) -->
      <keepalive>0</keepalive>

    </check>

  </io>

  <!-- Statistics -->
  <stats>
    <!-- file containing count of packets that went through -->
    <!--
    <packet>/var/jabberd/stats/c2s.packets</packet>
    -->
  </stats>

  <!-- PBX integration -->
  <pbx>
    <!-- Commands named pipe path. Allows creating "fake" sessions
         with given resource and status -->
    <!--
    <pipe>/var/jabberd/run/pbx</pipe>
    -->
    <!-- Available commands:
          START jid/resource [[priority ]status] [description]
          STOP jid/resource [description]
          where priority is integer between -128 and +127
          and status is one of: CHAT, ONLINE, DND, AWAY, XA
    -->
  </pbx>

  <!-- see-other-host error stream redirection support
       This will redirect connections to specified domains to other host:port
       Usefull when migrating service and DNS change did not propagate yet.
       Note that to_address should be RFC 3986 compliant. -->
  <stream_redirect>
    <!--
    <redirect requested_domain="some.domain" to_address="other.hostname" to_port="5269" />
    <redirect requested_domain="other.domain" to_address="other.host" to_port="1234" />
    -->
  </stream_redirect>

  <!-- Authentication/registration database configuration -->
  <authreg>
    <!-- Dynamic authreg modules path -->
    <path>/usr/local/lib/jabberd</path>

    <!-- Backend module to use -->
    <module>mysql</module>

    <!-- Available authentication mechanisms -->
    <mechanisms>

      <!-- These are the traditional Jabber authentication mechanisms.
           Comment out any that you don't want to be offered to clients.
           Note that if the auth/reg module does not support one of
           these mechanisms, then it will not be offered regardless of
           whether or not it is enabled here. -->
      <traditional>
        {{ if jabberd2_cert_pemfile is not defined and jabberd2_cert_cachain is not defined }}
        <plain/>
        {{ endif }}
      </traditional>

      <!-- SASL authentication mechanisms. Comment out any that you
           don't want to be offered to clients. Again, if the auth/reg
           module does not support one of these mechanisms, then it will
           not be offered. -->
      <sasl>
        {{ if jabberd2_cert_pemfile is not defined and jabberd2_cert_cachain is not defined }}
        <plain/>
        {{ endif }}
      </sasl>

    </mechanisms>

    <!-- Additional mechanisms that are also available when the
         connection is encrypted. Ie. when START-TLS had been
         negotiated, or user connected on SSL-wrapped port. -->
    <ssl-mechanisms>

      <!-- it's advisable that you disable plain in the above
           <mechanisms/> section -->
      <traditional>
        <plain/>
      </traditional>

      <sasl>
        <plain/>
      </sasl>

    </ssl-mechanisms>

    <!-- MySQL module configuration -->
    <mysql>
      <host>{{ jabberd2_mysql_host }}</host>
      <port>{{ jabberd2_mysql_port }}</port>
      <dbname>{{ jabberd2_mysql_db }}</dbname>
      <user>{{ jabberd2_mysql_user }}</user>
      <pass>{{ jabberd2_mysql_password }}</pass>

      <!-- Passwords in DB may be stored in plain or hashed format -->
      <!-- NOTE: If you are using hashed passwords, the only auth
                 method that will work is PLAIN.
                 Make sure that you disabled others in 'mechanisms'
                 sections of the config file. -->
      <password_type>
        <bcrypt cost='14'/>
      </password_type>
    </mysql>
  </authreg>
</c2s>
<!--
  vim: syntax=xml
-->
